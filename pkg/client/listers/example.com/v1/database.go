// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/xigang/helloworld-operator/pkg/apis/example.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseLister helps list Databases.
type DatabaseLister interface {
	// List lists all Databases in the indexer.
	List(selector labels.Selector) (ret []*v1.Database, err error)
	// Databases returns an object that can list and get Databases.
	Databases(namespace string) DatabaseNamespaceLister
	DatabaseListerExpansion
}

// databaseLister implements the DatabaseLister interface.
type databaseLister struct {
	indexer cache.Indexer
}

// NewDatabaseLister returns a new DatabaseLister.
func NewDatabaseLister(indexer cache.Indexer) DatabaseLister {
	return &databaseLister{indexer: indexer}
}

// List lists all Databases in the indexer.
func (s *databaseLister) List(selector labels.Selector) (ret []*v1.Database, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Database))
	})
	return ret, err
}

// Databases returns an object that can list and get Databases.
func (s *databaseLister) Databases(namespace string) DatabaseNamespaceLister {
	return databaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseNamespaceLister helps list and get Databases.
type DatabaseNamespaceLister interface {
	// List lists all Databases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Database, err error)
	// Get retrieves the Database from the indexer for a given namespace and name.
	Get(name string) (*v1.Database, error)
	DatabaseNamespaceListerExpansion
}

// databaseNamespaceLister implements the DatabaseNamespaceLister
// interface.
type databaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Databases in the indexer for a given namespace.
func (s databaseNamespaceLister) List(selector labels.Selector) (ret []*v1.Database, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Database))
	})
	return ret, err
}

// Get retrieves the Database from the indexer for a given namespace and name.
func (s databaseNamespaceLister) Get(name string) (*v1.Database, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("database"), name)
	}
	return obj.(*v1.Database), nil
}
